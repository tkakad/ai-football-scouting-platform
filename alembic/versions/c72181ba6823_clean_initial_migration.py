"""Clean initial migration

Revision ID: c72181ba6823
Revises: 
Create Date: 2025-06-15 15:56:05.740228

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c72181ba6823'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('request_id', sa.String(), nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('action', sa.String(), nullable=True),
    sa.Column('model_version', sa.String(), nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_log_id'), 'audit_log', ['id'], unique=False)
    op.create_table('chat_prompt_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('prompt', sa.Text(), nullable=False),
    sa.Column('response', sa.Text(), nullable=False),
    sa.Column('model_version', sa.String(), nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chat_prompt_log_id'), 'chat_prompt_log', ['id'], unique=False)
    op.create_table('feedback_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('request_id', sa.String(), nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('action', sa.String(), nullable=True),
    sa.Column('model_version', sa.String(), nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_feedback_log_id'), 'feedback_log', ['id'], unique=False)
    op.create_table('search_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('question', sa.Text(), nullable=False),
    sa.Column('response', sa.Text(), nullable=True),
    sa.Column('matched_players', sa.Integer(), nullable=True),
    sa.Column('model_version', sa.String(), nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_search_log_id'), 'search_log', ['id'], unique=False)
    op.create_table('teams',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_teams_id'), 'teams', ['id'], unique=False)
    op.create_index(op.f('ix_teams_name'), 'teams', ['name'], unique=True)
    op.create_table('players',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('nationality', sa.String(), nullable=True),
    sa.Column('position', sa.String(), nullable=True),
    sa.Column('appearances', sa.Integer(), nullable=True),
    sa.Column('minutes', sa.Integer(), nullable=True),
    sa.Column('goals', sa.Integer(), nullable=True),
    sa.Column('assists', sa.Integer(), nullable=True),
    sa.Column('yellow_cards', sa.Integer(), nullable=True),
    sa.Column('red_cards', sa.Integer(), nullable=True),
    sa.Column('shots_per_game', sa.Float(), nullable=True),
    sa.Column('pass_success', sa.Float(), nullable=True),
    sa.Column('aerials_won', sa.Float(), nullable=True),
    sa.Column('motm', sa.Integer(), nullable=True),
    sa.Column('rating', sa.Float(), nullable=True),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_players_id'), 'players', ['id'], unique=False)
    op.create_table('fact_biometric_minute',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('sensor_id', sa.String(), nullable=True),
    sa.Column('device_type', sa.String(), nullable=True),
    sa.Column('consent_status', sa.Boolean(), nullable=True),
    sa.Column('heart_rate_variability', sa.Float(), nullable=True),
    sa.Column('sprint_count', sa.Integer(), nullable=True),
    sa.Column('minutes_played', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_fact_biometric_minute_id'), 'fact_biometric_minute', ['id'], unique=False)
    op.create_table('match_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('match_date', sa.Date(), nullable=False),
    sa.Column('goals', sa.Integer(), nullable=True),
    sa.Column('assists', sa.Integer(), nullable=True),
    sa.Column('pass_accuracy', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_match_stats_id'), 'match_stats', ['id'], unique=False)
    op.create_table('status_intervals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('status_type', sa.String(), nullable=True),
    sa.Column('status_description', sa.String(), nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_status_intervals_id'), 'status_intervals', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_status_intervals_id'), table_name='status_intervals')
    op.drop_table('status_intervals')
    op.drop_index(op.f('ix_match_stats_id'), table_name='match_stats')
    op.drop_table('match_stats')
    op.drop_index(op.f('ix_fact_biometric_minute_id'), table_name='fact_biometric_minute')
    op.drop_table('fact_biometric_minute')
    op.drop_index(op.f('ix_players_id'), table_name='players')
    op.drop_table('players')
    op.drop_index(op.f('ix_teams_name'), table_name='teams')
    op.drop_index(op.f('ix_teams_id'), table_name='teams')
    op.drop_table('teams')
    op.drop_index(op.f('ix_search_log_id'), table_name='search_log')
    op.drop_table('search_log')
    op.drop_index(op.f('ix_feedback_log_id'), table_name='feedback_log')
    op.drop_table('feedback_log')
    op.drop_index(op.f('ix_chat_prompt_log_id'), table_name='chat_prompt_log')
    op.drop_table('chat_prompt_log')
    op.drop_index(op.f('ix_audit_log_id'), table_name='audit_log')
    op.drop_table('audit_log')
    # ### end Alembic commands ###
